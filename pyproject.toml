[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "discogsography"
version = "0.1.0"
description = "Using the discogs database export for local graph exploration"
authors = [{name = "Robert Wlodarczyk", email = "robert@simplicityguy.com"}]
# readme = "README.md"  # Commented out to avoid Docker build issues
requires-python = ">=3.13"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
license = {text = "MIT"}
dependencies = [
    # Core dependencies used across services
    "aio-pika>=9.0.0",
    "dict-hash>=1.1.0",
    "multidict>=6.5.1",
    "neo4j>=5.0.0",
    "orjson>=3.9.0",
    "pika>=1.3.0",
    "psycopg[binary]>=3.0.0",
    "structlog>=24.0.0",
    "tqdm>=4.65.0",
]

[project.optional-dependencies]
dashboard = [
    "fastapi>=0.115.6",
    "httpx>=0.27.0",
    "neo4j>=5.15.0",
    "prometheus-client>=0.21.1",
    "psycopg[binary]>=3.1.0",
    "pydantic>=2.10.5",
    "python-multipart>=0.0.20",
    "uvicorn[standard]>=0.34.0",
    "websockets>=14.2",
]
pyextractor = [
    "boto3>=1.34.0",
    "pika>=1.3.0",
    "xmltodict>=0.13.0",
]
graphinator = [
    "neo4j>=5.15.0",
]
tableinator = [
    "psycopg[binary]>=3.1.0",
]
dev = [
    "bandit>=1.7.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "playwright>=1.40.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=4.1.0",
    "pytest-playwright>=0.4.3",
    "pytest-timeout>=2.4.0",
    "pre-commit>=3.5.0",
    "ruff>=0.1.0",
    "types-tqdm>=4.67.0.20250516",
    "types-xmltodict>=0.14.0.20241009",
    "types-psutil>=6.1.0.20241102",
]
utilities = [
    "psutil>=5.9.0",
    "requests>=2.31.0",
]
discovery = [
    # Web framework dependencies
    "fastapi>=0.115.6",
    "httpx>=0.27.0",
    "neo4j>=5.15.0",
    "prometheus-client>=0.21.1",
    "psycopg[binary]>=3.1.0",
    "pydantic>=2.10.5",
    "python-multipart>=0.0.20",
    "uvicorn[standard]>=0.34.0",
    "websockets>=14.2",
    # Discovery-specific dependencies
    "networkx>=3.2.1",                  # Graph algorithms
    "numpy>=1.26.0",                    # Numerical computations
    "pandas>=2.1.0",                    # Data analysis
    "scikit-learn>=1.3.0",              # Machine learning
    "sentence-transformers[onnx]>=2.2.0",   # Semantic search with ONNX backend
    "plotly>=5.17.0",                   # Advanced visualizations
    "sqlalchemy[asyncio]>=2.0.0",       # Async SQL toolkit
    "asyncpg>=0.29.0",                  # Async PostgreSQL driver
]
all = [
    "discogsography[dashboard,discovery,pyextractor,graphinator,tableinator,dev,utilities]",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
lines-after-imports = 2
combine-as-imports = true
split-on-trailing-comma = true
known-first-party = ["config"]

[tool.ruff]
line-length = 150
target-version = "py313"

[tool.ruff.lint]
select = [
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "PTH", # flake8-use-pathlib
    "RUF", # ruff-specific rules
    "S",   # bandit security rules
    "SIM", # flake8-simplify
    "T20", # flake8-print (no print statements)
    "TCH", # flake8-type-checking
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
    "W191", # indentation contains tabs (explicit tab detection)
]
fixable = ["ALL"]
unfixable = []
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "E501",  # line too long, handled by ruff format
    "S101",  # use of assert detected (allow assert statements)
    "T201",  # print found (allow print statements for ASCII art)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"*/extractor.py" = ["T201"]    # Allow print statements for ASCII art
"*/graphinator.py" = ["T201"]  # Allow print statements for ASCII art
"*/tableinator.py" = ["T201"]  # Allow print statements for ASCII art

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
explicit_package_bases = true

# Ignore missing imports for third-party libraries without stubs
[[tool.mypy.overrides]]
module = [
    "aio_pika.*",
    "boto3.*",
    "botocore.*",
    "dict_hash",
    "neo4j.*",
    "pika.*",
    "psycopg.*",
    "tqdm",
    "xmltodict",
    "pandas.*",
    "plotly.*",
    "sklearn.*",
    "networkx.*",
    "sentence_transformers.*",
    "fastapi.*",
    "uvicorn.*",
    "pydantic.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_decorators = false

[tool.coverage.run]
source = ["common", "dashboard", "discovery", "extractor/pyextractor", "graphinator", "tableinator"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "def __repr__",
    "if __name__ == .__main__.:",
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --tb=short"
testpaths = ["tests"]
python_files = ["*_test.py", "test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
pythonpath = ["."]
timeout = 60
timeout_method = "thread"
markers = [
    "e2e: End-to-end tests requiring external services (deselect with '-m \"not e2e\"')",
]

# Package discovery for multi-service setup
[tool.hatch.build.targets.wheel]
packages = ["common"]

[dependency-groups]
dev = [
    "bandit>=1.7.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "pre-commit>=3.5.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "types-tqdm>=4.67.0.20250516",
    "types-xmltodict>=0.14.0.20241009",
    "types-psutil>=6.1.0.20241102",
    "pytest-timeout>=2.4.0",
    "mdformat>=0.7.22",
    "mdformat-black>=0.1.1",
    "mdformat-gfm>=0.4.1",
    "mdformat-tables>=1.0.0",
]

[tool.mdformat]
wrap = "no"  # Don't wrap lines
number = false  # Don't number headings
end_of_line = "lf"  # Use Unix line endings

[tool.bandit]
exclude_dirs = [".venv", "tests", "venv", "*/.venv/*", "*/venv/*"]
skips = ["B101", "B108"]  # Skip assert_used test and hardcoded temp directory

[tool.black]
line-length = 150
target-version = ["py313"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 150
known_first_party = ["config"]
lines_after_imports = 2
combine_as_imports = true
split_on_trailing_comma = true

# uv workspace configuration
[tool.uv.workspace]
members = ["common", "dashboard", "discovery", "extractor/pyextractor", "graphinator", "tableinator"]

# Environment restrictions for uv to avoid iOS and other incompatible platforms
[tool.uv]
environments = [
    # Only support Linux platforms that we build for in CI/CD
    "sys_platform == 'linux' and platform_machine == 'x86_64'",   # linux/amd64
    "sys_platform == 'linux' and platform_machine == 'aarch64'",  # linux/arm64
    # Also support local development on macOS
    "sys_platform == 'darwin' and platform_machine == 'x86_64'",  # macOS Intel
    "sys_platform == 'darwin' and platform_machine == 'arm64'",   # macOS Apple Silicon
]
