---
name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 1 * * 6"

env:
  CI: true
  COMPOSE_VERSION: "v2.32.0"
  PYTHON_VERSION: "3.13"
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write

jobs:
  list-sub-projects:
    uses: ./.github/workflows/list-sub-projects.yml

  run-code-quality:
    uses: ./.github/workflows/code-quality.yml
    secrets: inherit

  run-tests:
    needs: [run-code-quality]
    uses: ./.github/workflows/test.yml
    secrets: inherit

  run-e2e-tests:
    needs: [run-code-quality]
    uses: ./.github/workflows/e2e-test.yml
    secrets: inherit

  build-discogsography:
    needs: [list-sub-projects, run-code-quality, run-tests, run-e2e-tests]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        include: ${{ fromJson(needs.list-sub-projects.outputs.matrix) }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Set lowercase image name
        id: image
        run: |
          echo "IMAGE_NAME=$(echo "${{ github.repository }}" | tr "[:upper:]" "[:lower:]")" >> "$GITHUB_ENV"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Log in to the GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Anchore security scan - discogsography/${{ matrix.name }}
        uses: anchore/scan-action@16910ac423301c6d30554b83a7f71ac6ff4a51f3 # v6.4.0
        with:
          path: ${{ matrix.name }}

      - name: Install uv
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3
        with:
          version: latest
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-python-

      - name: Cache Docker layers
        if: ${{ matrix.use_cache }}
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.name }}-
            ${{ runner.os }}-buildx-

      - name: Generate uv.lock for Docker build
        run: uv sync --frozen

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.name }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=schedule,pattern={{date 'YYYYMMDD'}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Build and push Docker image to GitHub Container Registry - discogsography/${{ matrix.name }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.name }}/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          cache-from: ${{ matrix.use_cache && format('type=local,src={0}/.buildx-cache', runner.temp) || '' }}
          cache-to: ${{ matrix.use_cache && format('type=local,dest={0}/.buildx-cache-new,mode=max', runner.temp) || '' }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || github.event.repository.updated_at }}
            BUILD_VERSION=${{ steps.meta.outputs.version }}
            VCS_REF=${{ github.sha }}

      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        if: ${{ matrix.use_cache }}
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

      - name: Send notification to Discord
        uses: sarisia/actions-status-discord@5ddd3b114a98457dd80a39b2f00b6a998cd69008 # v1.15.3
        if: always()
        with:
          title: discogsography/${{ matrix.name }}
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
