---
# This is the primary test workflow that runs all unit and integration tests.
# It is called by the build.yml workflow and can also be triggered independently.
# For E2E and browser testing, see e2e-test.yml.
name: Test

on:
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - main
    paths:
      - "**/*.py"
      - "**/pyproject.toml"
      - "**/uv.lock"
      - "extractor/rustextractor/**/*.rs"
      - "extractor/rustextractor/**/Cargo.toml"
      - ".github/workflows/test.yml"
  pull_request:
    branches:
      - main
    paths:
      - "**/*.py"
      - "**/pyproject.toml"
      - "**/uv.lock"
      - "extractor/rustextractor/**/*.rs"
      - "extractor/rustextractor/**/Cargo.toml"
      - ".github/workflows/test.yml"

env:
  CI: true
  PYTHON_VERSION: "3.13"

permissions:
  contents: read

jobs:
  python-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 🔀 Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Need full history for diff

      - name: 🔍 Check if tests needed
        id: check-tests
        if: github.event_name == 'pull_request'
        run: |
          # Check if any Python files or test files changed
          if git diff --name-only "origin/${{ github.base_ref }}...HEAD" | grep -qE "\.(py|yaml|yml|toml)$|^tests/"; then
            echo "needed=true" >> "$GITHUB_OUTPUT"
            echo "✅ Tests needed - Python or config files changed"
          else
            echo "needed=false" >> "$GITHUB_OUTPUT"
            echo "⏭️ No Python or config files changed - tests can be skipped"
          fi

      - name: ⏭️ Skip remaining steps if not needed
        if: github.event_name == 'pull_request' && steps.check-tests.outputs.needed == 'false'
        run: |
          echo "::notice title=Tests Skipped::No relevant files changed, skipping tests"
          exit 0

      - name: 🔧 Setup Python and UV
        if: github.event_name != 'pull_request' || steps.check-tests.outputs.needed == 'true'
        uses: ./.github/actions/setup-python-uv
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Test cache (pytest)
      - name: 💾 Cache test results
        if: github.event_name != 'pull_request' || steps.check-tests.outputs.needed == 'true'
        uses: actions/cache@v4
        with:
          path: |
            .pytest_cache
            .coverage
            htmlcov
          key: ${{ runner.os }}-test-unit-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-test-unit-
            ${{ runner.os }}-test-

      - name: 📦 Install dependencies
        if: github.event_name != 'pull_request' || steps.check-tests.outputs.needed == 'true'
        run: |
          uv sync --all-extras --frozen
          # Install workspace packages
          uv pip install -e dashboard
          uv pip install -e common

      - name: 🧪 Run unit tests with coverage (excluding E2E)
        if: github.event_name != 'pull_request' || steps.check-tests.outputs.needed == 'true'
        run: |
          # Run tests in groups to avoid async conflicts
          echo "Running core tests..."
          uv run pytest tests/test_config.py tests/test_integration.py tests/extractor/ -v

          echo "Running dashboard tests..."
          uv run pytest tests/dashboard/ -v -m "not e2e"

          echo "Running graphinator tests..."
          uv run pytest tests/graphinator/ -v

          echo "Running tableinator tests..."
          uv run pytest tests/tableinator/ -v

          echo "Running discovery tests..."
          uv run pytest tests/discovery/ -v

          # Generate combined coverage report
          echo "Generating coverage report..."
          uv run pytest --cov --cov-append --cov-report=term --cov-report=xml -m "not e2e" --no-header -q

      - name: 📊 Upload Python coverage reports
        if: github.event_name != 'pull_request' || steps.check-tests.outputs.needed == 'true'
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          flags: python
          name: python-coverage
          fail_ci_if_error: false

  rust-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 🔀 Checkout repository
        uses: actions/checkout@v5

      - name: 🔍 Check if Rust extractor exists
        id: check-rust
        run: |
          if [[ -f "extractor/rustextractor/Cargo.toml" ]]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "✅ Rust extractor found - tests will run"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "⏭️ No Rust extractor found - skipping Rust tests"
          fi

      - name: ⏭️ Skip remaining steps if Rust extractor doesn't exist
        if: steps.check-rust.outputs.exists == 'false'
        run: |
          echo "::notice title=Rust Tests Skipped::No Rust extractor found in this branch"
          exit 0

      - name: 🦀 Setup Rust toolchain
        if: steps.check-rust.outputs.exists == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: 📦 Install cargo-llvm-cov
        if: steps.check-rust.outputs.exists == 'true'
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: 💾 Cache Rust dependencies
        if: steps.check-rust.outputs.exists == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            extractor/rustextractor/target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-

      - name: 🧪 Run Rust tests with coverage
        if: steps.check-rust.outputs.exists == 'true'
        run: |
          cd extractor/rustextractor
          cargo llvm-cov test --verbose --lcov --output-path lcov.info

      - name: 📊 Upload Rust coverage reports
        if: steps.check-rust.outputs.exists == 'true'
        uses: codecov/codecov-action@v5
        with:
          files: extractor/rustextractor/lcov.info
          flags: rust
          name: rust-coverage
          fail_ci_if_error: false
