---

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

networks:
  discogsography:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # Message broker
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: discogsography-rabbitmq
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: discogsography
      RABBITMQ_DEFAULT_PASS: discogsography
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit log_levels [{connection,error},{default,warning}]"
    ports:
      - "5672:5672"      # AMQP port
      - "15672:15672"    # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 45s
    networks:
      discogsography:
        aliases:
          - message-broker
          - amqp
    restart: unless-stopped
    logging: *default-logging

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: discogsography-postgres
    hostname: postgres
    environment:
      POSTGRES_DB: discogsography
      POSTGRES_USER: discogsography
      POSTGRES_PASSWORD: discogsography
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"  # Changed from 5432 to avoid conflict
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U discogsography -d discogsography -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 45s
    networks:
      discogsography:
        aliases:
          - postgres-db
          - database
    restart: unless-stopped
    logging: *default-logging
    security_opt:
      - no-new-privileges:true

  # Neo4j graph database
  neo4j:
    image: neo4j:5.25-community
    container_name: discogsography-neo4j
    hostname: neo4j
    environment:
      NEO4J_AUTH: neo4j/discogsography
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: 'true'
      NEO4J_apoc_import_file_enabled: 'true'
      NEO4J_apoc_import_file_use__neo4j__config: 'true'
      NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
      NEO4J_dbms_logs_debug_level: WARN
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1G
    ports:
      - "7474:7474"      # HTTP
      - "7687:7687"      # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "discogsography", "RETURN 1 as health"]
      interval: 15s
      timeout: 10s
      retries: 20
      start_period: 60s
    networks:
      discogsography:
        aliases:
          - graph-db
          - neo4j-db
    restart: unless-stopped
    logging: *default-logging
    security_opt:
      - no-new-privileges:true

  # Extractor service
  extractor:
    build:
      context: .
      dockerfile: extractor/Dockerfile
      args:
        PYTHON_VERSION: ${PYTHON_VERSION:-3.13}
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    image: discogsography/extractor:latest
    container_name: discogsography-extractor
    hostname: extractor
    user: "${UID:-1000}:${GID:-1000}"
    environment:
      AMQP_CONNECTION: amqp://discogsography:discogsography@rabbitmq:5672/
      DISCOGS_ROOT: /discogs-data
      PYTHONUNBUFFERED: "1"
      STARTUP_DELAY: "10"
    volumes:
      - discogs_data:/discogs-data
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - discogsography
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: on-failure
    logging: *default-logging
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp

  # Graphinator service
  graphinator:
    build:
      context: .
      dockerfile: graphinator/Dockerfile
      args:
        PYTHON_VERSION: ${PYTHON_VERSION:-3.13}
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    image: discogsography/graphinator:latest
    container_name: discogsography-graphinator
    hostname: graphinator
    user: "${UID:-1000}:${GID:-1000}"
    environment:
      AMQP_CONNECTION: amqp://discogsography:discogsography@rabbitmq:5672/
      NEO4J_ADDRESS: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: discogsography
      PYTHONUNBUFFERED: "1"
      STARTUP_DELAY: "15"
    depends_on:
      rabbitmq:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - discogsography
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: on-failure
    logging: *default-logging
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp

  # Tableinator service
  tableinator:
    build:
      context: .
      dockerfile: tableinator/Dockerfile
      args:
        PYTHON_VERSION: ${PYTHON_VERSION:-3.13}
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    image: discogsography/tableinator:latest
    container_name: discogsography-tableinator
    hostname: tableinator
    user: "${UID:-1000}:${GID:-1000}"
    environment:
      AMQP_CONNECTION: amqp://discogsography:discogsography@rabbitmq:5672/
      POSTGRES_ADDRESS: postgres:5432
      POSTGRES_USERNAME: discogsography
      POSTGRES_PASSWORD: discogsography
      POSTGRES_DATABASE: discogsography
      PYTHONUNBUFFERED: "1"
      STARTUP_DELAY: "20"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - discogsography
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: on-failure
    logging: *default-logging
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp

  # Dashboard service
  dashboard:
    build:
      context: .
      dockerfile: dashboard/Dockerfile
      args:
        PYTHON_VERSION: ${PYTHON_VERSION:-3.13}
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    image: discogsography/dashboard:latest
    container_name: discogsography-dashboard
    hostname: dashboard
    user: "${UID:-1000}:${GID:-1000}"
    environment:
      AMQP_CONNECTION: amqp://discogsography:discogsography@rabbitmq:5672/
      NEO4J_ADDRESS: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: discogsography
      POSTGRES_ADDRESS: postgres:5432
      POSTGRES_USERNAME: discogsography
      POSTGRES_PASSWORD: discogsography
      POSTGRES_DATABASE: discogsography
      RABBITMQ_MANAGEMENT_USER: discogsography
      RABBITMQ_MANAGEMENT_PASSWORD: discogsography
      PYTHONUNBUFFERED: "1"
      UV_CACHE_DIR: "/tmp/.cache/uv"
    ports:
      - "8003:8003"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - discogsography
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging: *default-logging
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
      - /.cache

  # Discovery service
  discovery:
    build:
      context: .
      dockerfile: discovery/Dockerfile
      args:
        PYTHON_VERSION: ${PYTHON_VERSION:-3.13}
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    image: discogsography/discovery:latest
    container_name: discogsography-discovery
    hostname: discovery
    user: "${UID:-1000}:${GID:-1000}"
    environment:
      AMQP_CONNECTION: amqp://discogsography:discogsography@rabbitmq:5672/
      NEO4J_ADDRESS: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: discogsography
      POSTGRES_ADDRESS: postgres:5432
      POSTGRES_USERNAME: discogsography
      POSTGRES_PASSWORD: discogsography
      POSTGRES_DATABASE: discogsography
      PYTHONUNBUFFERED: "1"
      UV_CACHE_DIR: "/tmp/.cache/uv"
      HF_HOME: "/models/huggingface"
      SENTENCE_TRANSFORMERS_HOME: "/models/sentence-transformers"
      TRANSFORMERS_CACHE: "/models/transformers"
      XDG_CACHE_HOME: "/tmp/.cache"
    ports:
      - "8004:8004"      # Health check port
      - "8005:8005"      # Discovery service port
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    volumes:
      - discovery_models:/models
    networks:
      - discogsography
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    logging: *default-logging
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
      - /.cache

volumes:
  rabbitmq_data:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  discogs_data:
  discovery_models:
